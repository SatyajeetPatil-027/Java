package com.app.fruit;

public class Fruit
{
	protected String name;
	protected String color;
	protected double weight;
	protected boolean isFresh;

	public Fruit(String name, String color, double weight)
	{
		this.name = name;
		this.color = color;
		this.weight = weight;
		this.isFresh = true;
	}

	public String getName()
	{
		return name;
	}

	public boolean isFresh()
	{
		return isFresh;
	}

	public void setFresh(boolean isFresh)
	{
		this.isFresh = isFresh;
	}

	@Override
	public String toString()
	{
		return "Name: " + name + ", Color: " + color + ", Weight: " + weight;
	}

	public String taste() 
	{
		return "no specific taste";
	}
}



package com.app.fruit;

public class Mango extends Fruit
{
	public Mango(String color, double weight)
	{
		super("Mango", color, weight);
	}

	@Override
	public String taste()
	{
		return "Sweet.";
	}
}




package com.app.fruit;

public class Orange extends Fruit
{
	public Orange(String color, double weight)
	{
		super("Orange", color, weight);
	}

	@Override
	public String taste()
	{
		return "sour";
	}
}





package com.app.fruit;

public class Apple extends Fruit
{
	public Apple(String color, double weight)
	{
		super("Apple", color, weight);
	}

	@Override
	public String taste()
	{
		return "Sweet and sour.";
	}
}








package com.app.fruit;

import java.util.Scanner;

public class FruitBasket
{

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter basket size: ");
		int size = sc.nextInt();
		Fruit[] basket = new Fruit[size]; 
		int counter = 0;

		int choice;
		do
		{
			System.out.println("\n0. Exit\n1. Add Mango\n2. Add Orange\n3. Add Apple");
			System.out.println("4. Show Fruit Names");
			System.out.println("5. Show Fresh Fruits (Full Details)");
			System.out.println("6. Mark Fruit Stale");
			System.out.println("7. Show Tastes of Stale Fruits");
			System.out.print("Enter choice: ");
			choice = sc.nextInt();

			switch (choice)
			{
			case 1:
				if (counter < basket.length)
				{
					System.out.print("Enter color: ");
					String color = sc.next();
					System.out.print("Enter weight: ");
					double weight = sc.nextDouble();

					Fruit f = new Mango(color, weight); 
					basket[counter++] = f;
					System.out.println("\nMango added.");
					System.out.println("---------------------------------------------------");
				} 
				else
				{
					System.out.println("\nBasket is full!");
					System.out.println("---------------------------------------------------");					
				}
				break;

			case 2:
				if (counter < basket.length)
				{
					System.out.print("Enter color: ");
					String color = sc.next();
					System.out.print("Enter weight: ");
					double weight = sc.nextDouble();

					Fruit f = new Orange(color, weight); 
					basket[counter++] = f;
					System.out.println("\nOrange added.");
					System.out.println("---------------------------------------------------");	
				}
				else
				{
					System.out.println("\nBasket is full!");
					System.out.println("---------------------------------------------------");	
				}
				break;

			case 3:
				if (counter < basket.length)
				{
					System.out.print("Enter color: ");
					String color = sc.next();
					System.out.print("Enter weight: ");
					double weight = sc.nextDouble();

					Fruit f = new Apple(color, weight); 
					basket[counter++] = f;
					System.out.println("\nApple added.");
					System.out.println("---------------------------------------------------");	
				}
				else
				{
					System.out.println("\nBasket is full!");
					System.out.println("---------------------------------------------------");	
				}
				break;

			case 4:
				System.out.println("Fruit Names:");
				for (Fruit f : basket)
				{
					if (f != null)
						System.out.println(f.getName());
				}
				break;

			case 5:
				System.out.println("Fresh Fruits:");
				for (Fruit f : basket)
				{
					if (f != null && f.isFresh())
					{
						System.out.println(f); // toString()
						System.out.println("Taste: " + f.taste()); // Polymorphism
					}
				}
				break;

			case 6:
				System.out.print("Enter index to mark as stale: ");
				int index = sc.nextInt();
				if (index >= 0 && index < basket.length && basket[index] != null)
				{
					basket[index].setFresh(false);
					System.out.println("\nMarked as stale.");
					System.out.println("---------------------------------------------------");	
				}
				else
				{
					System.out.println("Invalid index.");
					System.out.println("---------------------------------------------------");	
				}
				break;

			case 7:
				System.out.println("Stale Fruits and Tastes:");
				for (Fruit f : basket)
				{
					if (f != null && !f.isFresh())
					{
						System.out.println(f.getName() + " â†’ " + f.taste());
					}
				}
				break;

			case 0:
				System.out.println("\nExiting...");
				break;

			default:
				System.out.println("\nInvalid choice.");
				System.out.println("---------------------------------------------------");	
			}
		}
		while (choice != 0);
		sc.close();
	}
}
