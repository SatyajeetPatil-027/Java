// StackInterface
public interface StackInterface {
    void push(int element);
    int pop();
    int peek();
    void displayStack();
}

// QueueInterface
public interface QueueInterface {
    void enqueue(int element);
    int dequeue();
    void displayQueue();
}

public class StackQueue implements StackInterface, QueueInterface {
    private int[] stack;
    private int[] queue;
    private int top;
    private int front;
    private int rear;
    private int size;

    public StackQueue(int size) {
        this.size = size;
        stack = new int[size];
        queue = new int[size];
        top = -1;
        front = 0;
        rear = -1;
    }

    // Stack methods
    public void push(int element) {
        if (top < size - 1) {
            stack[++top] = element;
        } else {
            System.out.println("Stack Overflow");
        }
    }

    public int pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            System.out.println("Stack Underflow");
            return -1;
        }
    }

    public int peek() {
        if (top >= 0) {
            return stack[top];
        } else {
            System.out.println("Stack is empty");
            return -1;
        }
    }

    public void displayStack() {
        System.out.print("Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }

    // Queue methods
    public void enqueue(int element) {
        if (rear < size - 1) {
            queue[++rear] = element;
        } else {
            System.out.println("Queue Overflow");
        }
    }

    public int dequeue() {
        if (front <= rear) {
            return queue[front++];
        } else {
            System.out.println("Queue Underflow");
            return -1;
        }
    }

    public void displayQueue() {
        System.out.print("Queue: ");
        for (int i = front; i <= rear; i++) {
            System.out.print(queue[i] + " ");
        }
        System.out.println();
    }
}


import java.util.Scanner;

public class StackQueueTest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StackQueue sq = new StackQueue(10);
        int choice;

        do {
            System.out.println("\n--- Menu ---");
            System.out.println("1. Push to Stack");
            System.out.println("2. Pop from Stack");
            System.out.println("3. Peek Stack");
            System.out.println("4. Display Stack");
            System.out.println("5. Enqueue to Queue");
            System.out.println("6. Dequeue from Queue");
            System.out.println("7. Display Queue");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter element to push: ");
                    sq.push(sc.nextInt());
                    break;
                case 2:
                    System.out.println("Popped: " + sq.pop());
                    break;
                case 3:
                    System.out.println("Top element: " + sq.peek());
                    break;
                case 4:
                    sq.displayStack();
                    break;
                case 5:
                    System.out.print("Enter element to enqueue: ");
                    sq.enqueue(sc.nextInt());
                    break;
                case 6:
                    System.out.println("Dequeued: " + sq.dequeue());
                    break;
                case 7:
                    sq.displayQueue();
                    break;
                case 8:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice");
            }
        } while (choice != 8);

        
    }
}
